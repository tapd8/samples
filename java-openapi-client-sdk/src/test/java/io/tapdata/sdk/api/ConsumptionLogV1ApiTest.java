/*
 * Tapdata OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: moa-v1.1.0-115-g56235c8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tapdata.sdk.api;

import io.tapdata.sdk.ApiException;
import io.tapdata.sdk.ApiClient;
import io.tapdata.sdk.model.CONSUMPTIONLOG;
import io.tapdata.sdk.model.Filter;
import io.tapdata.sdk.model.InlineResponse200;
import org.apache.commons.lang3.RandomUtils;
import org.junit.Test;
import org.junit.Ignore;
import org.threeten.bp.OffsetDateTime;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

/**
 * API tests for ConsumptionLogV1Api
 */
public class ConsumptionLogV1ApiTest {

    private final ApiClient apiClient = new ApiClient(
        "5c0e750b7a5cd42464a5099d",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
        "http://106.75.162.192:3080", // http://127.0.0.1:3080
        "http://106.75.162.192:3030/oauth/token" // http://127.0.0.1:3030/oauth/token
    );
    private final ConsumptionLogV1Api api = new ConsumptionLogV1Api(apiClient);

    private static String id;

    /**
     *
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
    public void cONSUMPTIONLOGV1ControllerCreateTest() throws ApiException {
        CONSUMPTIONLOG CONSUMPTIONLOG = new CONSUMPTIONLOG();
        CONSUMPTIONLOG.setCUSTOMERID("C000079948");
        CONSUMPTIONLOG.setAMOUNT(new BigDecimal(RandomUtils.nextDouble(1000, 10000)).setScale(2, BigDecimal.ROUND_HALF_UP));
        CONSUMPTIONLOG.setBUYTIME(OffsetDateTime.now());
        CONSUMPTIONLOG.setSHOP("LV");
        CONSUMPTIONLOG response = api.cONSUMPTIONLOGV1ControllerCreate(CONSUMPTIONLOG);

        // TODO: test validations
        System.out.println("====== Create CONSUMPTIONLOG ======");
        System.out.println(response.toString());
        id = response.getId();
        System.out.println("\n\n");
    }

    /**
     * delete record by id
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
    public void cONSUMPTIONLOGV1ControllerDeleteByIdTest() throws ApiException {
        String id = new String(this.id);
        api.cONSUMPTIONLOGV1ControllerDeleteById(id);

        // TODO: test validations
        System.out.println("====== Delete by id succeed ======\n\n");
    }

    /**
     * get record by id
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
    public void cONSUMPTIONLOGV1ControllerFindByIdTest() throws ApiException {
        String id = new String(this.id);
        CONSUMPTIONLOG response = api.cONSUMPTIONLOGV1ControllerFindById(id);

        // TODO: test validations
        System.out.println("====== Find by id: " + this.id + " ======");
        System.out.println(response.toString());
        System.out.println("\n\n");
    }

    /**
     * get record list by page and limit
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
    public void cONSUMPTIONLOGV1ControllerFindPageTest() throws ApiException {
        Filter filter = new Filter();
        Map<String, Object> where = new HashMap<String, Object>(){{
           put("[AMOUNT][gt]", 5000);
        }};
        filter.setWhere(where);
        filter.setLimit(10);
        filter.setSkip(0);
        filter.setOrder(new ArrayList<String>(){{
            add("AMOUNT+DESC");
        }});
        InlineResponse200 response = api.cONSUMPTIONLOGV1ControllerFindPage(filter);

        // TODO: test validations
        System.out.println("====== Find by filter: where AMOUNT>5000, limit=10, skip=0, order by AMOUNT DESC ======");
        System.out.println("Total count: " + response.getTotal());
        List<CONSUMPTIONLOG> data = response.getData();
        for (CONSUMPTIONLOG datum : data) {
            System.out.println(datum.toString());
        }
        System.out.println("\n\n");
    }

    /**
     * update record by id
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
    public void cONSUMPTIONLOGV1ControllerUpdateByIdTest() throws ApiException {
        String id = new String(this.id);
        CONSUMPTIONLOG CONSUMPTIONLOG = new CONSUMPTIONLOG();
        BigDecimal update = new BigDecimal(RandomUtils.nextDouble(1000, 10000)).setScale(2, BigDecimal.ROUND_HALF_UP);
        CONSUMPTIONLOG.setAMOUNT(update);
        api.cONSUMPTIONLOGV1ControllerUpdateById(id, CONSUMPTIONLOG);

        // TODO: test validations
        System.out.println("====== Update AMOUNT=" + update + " by id succeed ======\n\n");
    }

    @Test
    public void allTest() throws ApiException {
        this.cONSUMPTIONLOGV1ControllerCreateTest();
        this.cONSUMPTIONLOGV1ControllerFindByIdTest();
        this.cONSUMPTIONLOGV1ControllerUpdateByIdTest();
        this.cONSUMPTIONLOGV1ControllerFindByIdTest();
        this.cONSUMPTIONLOGV1ControllerDeleteByIdTest();
        this.cONSUMPTIONLOGV1ControllerFindPageTest();
    }

}
